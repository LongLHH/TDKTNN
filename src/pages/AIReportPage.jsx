import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';

const AIReportPage = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('tools'); // tools, evidence, application, integrity



  const aiTools = [
    {
      name: 'GitHub Copilot',
      purpose: 'C·∫£i thi·ªán UI/UX v√† animation',
      prompts: [
        'C·∫£i thi·ªán component React hi·ªáu qu·∫£ v·ªõi animations m∆∞·ª£t m√†, t·ªëi ∆∞u responsive design v√† enhanced user experience cho ·ª©ng d·ª•ng',
        'T·∫°o card layout cho timeline v·ªõi animations v√† enhanced visual effects'
      ],
      outputs: [
        'Suggestions for advanced animations, improved responsive layouts, enhanced visual effects and performance optimizations',
        'Timeline cards v·ªõi animations v√† responsive design'
      ],
      edits: [
        '√Åp d·ª•ng selective c√°c ƒë·ªÅ xu·∫•t gi·ªØ l·ªçp, t√πy ch·ªânh animations timing, ƒëi·ªÅu ch·ªânh breakpoints v√† t·ªëi ∆∞u performance',
        'Customize layout, th√™m gradient backgrounds, ƒëi·ªÅu ch·ªânh spacing'
      ]
    },
    {
      name: 'Gemini Gem v√† NotebookLM',
      purpose: 'T·ªïng h·ª£p, t∆∞ v·∫•n n·ªôi dung v√† c·∫•u tr√∫c',
      prompts: [
        'Ph√¢n t√≠ch v√† t·ªïng h·ª£p c√°c kh√°i ni·ªám ƒë·ªôc quy·ªÅn t·ª´ Marx-Lenin, ƒë∆∞a ra c·∫•u tr√∫c t·ªïng qu√°t ƒë·ªÉ ph√¢n t√≠ch hai logic v√† t·∫°o n·ªôi dung ph√¢n t√≠ch v·ªõi sinh vi√™n Vi·ªát Nam',
        'T·∫°o n·ªôi dung v·ªÅ ƒë·ªôc quy·ªÅn t·ª± nhi√™n v√† ƒë·ªôc quy·ªÅn ch·ªâ ƒë·ªãnh t·ª´ c√°c ngu·ªìn h·ªçc thu·∫≠t'
      ],
      outputs: [
        'Structured content v·ªÅ c√°c kh√°i ni·ªám ƒë·ªôc quy·ªÅn c∆° b·∫£n, theories l·ªãch s·ª≠, c√°c kh√°i ni·ªám li√™n ƒë·ªõi k√®m h·ªá th·ªëng categories v√† ƒë∆∞·ª£c gi·∫£i th√≠ch d·ªÖ hi·ªÉu v√† mind maps t·ªïng h·ª£p',
        'Chi ti·∫øt n·ªôi dung ƒë·ªôc quy·ªÅn t·ª´ nhi·ªÅu g√≥c nh√¨n v·ªõi structured output'
      ],
      edits: [
        'ƒêi·ªÅu ch·ªânh n·ªôi dung theo h·ªçc sinh, b·ªï sung v√≠ d·ª• t·ª´ th·ªã tr∆∞·ªùng Vi·ªát Nam, t·ªëi ∆∞u c·∫•u tr√∫c, th√™m tin cho web interface',
        'Ch·ªçn l·ªçc n·ªôi dung ph√π h·ª£p, ƒë∆°n gi·∫£n h√≥a thu·∫≠t ng·ªØ, th√™m context Vi·ªát Nam'
      ]
    },
    {
      name: 'Gemini Nano Banana',
      purpose: 'T·∫°o h√¨nh ·∫£nh minh h·ªça',
      prompts: [
        'Create vintage-style illustrations for Marx-Lenin economic theory timeline',
        'Generate company logos for Vietnamese State Economic Groups (EVN, PVN, VNPT)'
      ],
      outputs: [
        'C√°c h√¨nh ·∫£nh timeline v√† timeline theo style c·ªï ƒëi·ªÉn',
        'Company logos theo phong c√°ch hi·ªán ƒë·∫°i minimalist'
      ],
      edits: [
        'Ch·ªânh m√†u s·∫Øc, k√≠ch th∆∞·ªõc cho ph√π h·ª£p v·ªõi theme web',
        'Export sang SVG format, t·ªëi ∆∞u k√≠ch th∆∞·ªõc file'
      ]
    }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-950 via-stone-900 to-neutral-950 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <motion.div 
          className="mb-8"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <div className="flex flex-col items-center text-center mb-8">
            <button
              onClick={() => navigate('/')}
              className="self-end mb-4 px-4 py-2 bg-amber-900/50 hover:bg-amber-800/50 backdrop-blur-sm border border-amber-700/30 rounded-xl text-amber-100 transition-all text-sm"
            >
              ‚Üê Quay l·∫°i trang ch·ªß
            </button>
            <h1 className="text-5xl md:text-6xl font-bold text-amber-100 mb-3" style={{ fontFamily: 'Georgia, serif' }}>
              B√°o c√°o S·ª≠ d·ª•ng AI
            </h1>
            <p className="text-xl text-amber-300" style={{ fontFamily: 'Georgia, serif' }}>
              Cam k·∫øt Li√™m ch√≠nh H·ªçc thu·∫≠t
            </p>
          </div>

          {/* Tab Navigation */}
          <div className="flex flex-wrap justify-center gap-3 mb-8">
            {[
              { id: 'tools', label: 'ü§ñ C√¥ng c·ª• AI ƒë√£ s·ª≠ d·ª•ng', icon: 'ü§ñ' },
              { id: 'evidence', label: 'ÔøΩ Ki·ªÉm ch·ª©ng ngu·ªìn', icon: 'ÔøΩ' },
              { id: 'application', label: 'ÔøΩ ·ª®ng d·ª•ng AI s√°ng t·∫°o', icon: 'ÔøΩ' },
              { id: 'integrity', label: 'ÔøΩ Cam k·∫øt li√™m ch√≠nh', icon: 'ÔøΩ' }
            ].map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`px-5 py-3 rounded-xl font-medium transition-all ${
                  activeTab === tab.id
                    ? 'bg-amber-700 text-white shadow-xl border border-amber-500'
                    : 'bg-amber-900/30 text-amber-200 hover:text-white hover:bg-amber-900/50 border border-amber-800/30'
                }`}
              >
                <span className="text-lg">{tab.icon}</span>
                <span className="ml-2 hidden md:inline">{tab.label.replace(/^.+?\s/, '')}</span>
                <span className="ml-2 md:hidden">{tab.label.split(' ')[1]}</span>
              </button>
            ))}
          </div>
        </motion.div>

        <AnimatePresence mode="wait">
          {/* Tools Tab */}
          {activeTab === 'tools' && (
            <motion.div
              key="tools"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="space-y-6"
            >
              <motion.div 
                className="bg-amber-900/20 backdrop-blur-sm border border-amber-700/30 rounded-2xl p-6"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
              >
                <h2 className="text-3xl font-bold text-amber-100 mb-6" style={{ fontFamily: 'Georgia, serif' }}>
                  ü§ñ C√¥ng c·ª• AI ƒë√£ s·ª≠ d·ª•ng
                </h2>
                
                <div className="space-y-8">
                  {aiTools.map((tool, index) => (
                    <motion.div
                      key={tool.name}
                      className="bg-stone-900/60 border border-amber-800/30 rounded-xl p-6"
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.15 }}
                      whileHover={{ scale: 1.01, borderColor: 'rgba(217, 119, 6, 0.5)' }}
                    >
                      <h3 className="text-2xl font-bold text-amber-200 mb-3">{tool.name}</h3>
                      <p className="text-amber-400 italic mb-4">M·ª•c ƒë√≠ch: {tool.purpose}</p>
                      
                      <div className="grid md:grid-cols-3 gap-4">
                        <div className="bg-amber-950/40 p-4 rounded-lg">
                          <h4 className="text-amber-300 font-semibold mb-2">Prompt ch√≠nh:</h4>
                          <ul className="space-y-2">
                            {tool.prompts.map((prompt, i) => (
                              <li key={i} className="text-amber-100/80 text-sm leading-relaxed">
                                {prompt}
                              </li>
                            ))}
                          </ul>
                        </div>
                        
                        <div className="bg-amber-950/40 p-4 rounded-lg">
                          <h4 className="text-amber-300 font-semibold mb-2">Output t·ª´ AI:</h4>
                          <ul className="space-y-2">
                            {tool.outputs.map((output, i) => (
                              <li key={i} className="text-amber-100/80 text-sm leading-relaxed">
                                {output}
                              </li>
                            ))}
                          </ul>
                        </div>
                        
                        <div className="bg-amber-950/40 p-4 rounded-lg">
                          <h4 className="text-amber-300 font-semibold mb-2">Ch·ªânh s·ª≠a c·ªßa nh√≥m:</h4>
                          <ul className="space-y-2">
                            {tool.edits.map((edit, i) => (
                              <li key={i} className="text-amber-100/80 text-sm leading-relaxed">
                                {edit}
                              </li>
                            ))}
                          </ul>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </motion.div>
            </motion.div>
          )}

          {/* Evidence Tab */}
          {activeTab === 'evidence' && (
            <motion.div
              key="evidence"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="space-y-6"
            >
              <motion.div 
                className="bg-amber-900/20 backdrop-blur-sm border border-amber-700/30 rounded-2xl p-6"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
              >
                <h2 className="text-3xl font-bold text-amber-100 mb-4" style={{ fontFamily: 'Georgia, serif' }}>
                  üîç Ki·ªÉm ch·ª©ng ngu·ªìn
                </h2>
                <p className="text-amber-200 mb-6">
                  T·∫•t c·∫£ th√¥ng tin v·ªÅ T·∫≠p ƒëo√†n Kinh t·∫ø Nh√† n∆∞·ªõc ƒë·ªÅu ƒë∆∞·ª£c cross-reference t·ª´ nhi·ªÅu ngu·ªìn h·ªçc thu·∫≠t ƒë√°ng tin c·∫≠y
                </p>
                
                <div className="space-y-4">
                  {[
                    {
                      title: 'L√Ω thuy·∫øt ƒê·ªôc quy·ªÅn',
                      sources: ['T∆∞ b·∫£n - Karl Marx', 'Gi√°o tr√¨nh Kinh t·∫ø Ch√≠nh tr·ªã M√°c-L√™nin', 'Nghi√™n c·ª©u v·ªÅ Kinh t·∫ø Vi·ªát Nam'],
                      verified: true
                    },
                    {
                      title: 'D·ªØ li·ªáu v·ªÅ EVN, PVN, VNPT',
                      sources: ['Website ch√≠nh th·ª©c c√°c t·∫≠p ƒëo√†n', 'B√°o c√°o th∆∞·ªùng ni√™n', 'Ngh·ªã quy·∫øt Ch√≠nh ph·ªß'],
                      verified: true
                    },
                    {
                      title: 'Ph√¢n t√≠ch ƒê·ªôc quy·ªÅn trong th·ª±c ti·ªÖn Vi·ªát Nam',
                      sources: ['B√°o c√°o Ng√¢n h√†ng Th·∫ø gi·ªõi', 'Nghi√™n c·ª©u VEPR', 'T·∫°p ch√≠ Kinh t·∫ø & Ph√°t tri·ªÉn'],
                      verified: true
                    }
                  ].map((item, index) => (
                    <motion.div
                      key={index}
                      className="bg-stone-900/60 border border-amber-800/30 rounded-xl p-5"
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                    >
                      <div className="flex items-start justify-between mb-3">
                        <h3 className="text-xl font-semibold text-amber-200">{item.title}</h3>
                        {item.verified && (
                          <span className="bg-green-600/30 text-green-300 px-3 py-1 rounded-full text-xs font-medium">
                            ‚úì ƒê√£ x√°c minh
                          </span>
                        )}
                      </div>
                      <div className="text-sm text-amber-100/70">
                        <span className="font-medium">Ngu·ªìn tham kh·∫£o: </span>
                        {item.sources.join(' ‚Ä¢ ')}
                      </div>
                    </motion.div>
                  ))}
                </div>
              </motion.div>
            </motion.div>
          )}

          {/* Application Tab */}
          {activeTab === 'application' && (
            <motion.div
              key="application"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="space-y-6"
            >
              <motion.div 
                className="bg-amber-900/20 backdrop-blur-sm border border-amber-700/30 rounded-2xl p-6"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
              >
                <h2 className="text-3xl font-bold text-amber-100 mb-4" style={{ fontFamily: 'Georgia, serif' }}>
                  üéØ ·ª®ng d·ª•ng AI s√°ng t·∫°o
                </h2>
                <p className="text-amber-200 mb-6">
                  AI ƒë∆∞·ª£c s·ª≠ d·ª•ng nh∆∞ c√¥ng c·ª• h·ªó tr·ª£, kh√¥ng thay th·∫ø t∆∞ duy ph·∫£n bi·ªán v√† s√°ng t·∫°o c·ªßa nh√≥m
                </p>
                
                <div className="grid md:grid-cols-2 gap-6">
                  {[
                    {
                      icon: 'üí°',
                      title: 'Brainstorming & C·∫•u tr√∫c',
                      desc: 'AI gi√∫p t·ªï ch·ª©c √Ω t∆∞·ªüng ban ƒë·∫ßu, ƒë·ªÅ xu·∫•t framework ph√¢n t√≠ch. Nh√≥m quy·∫øt ƒë·ªãnh g√≥c nh√¨n, logic tr√¨nh b√†y v√† n·ªôi dung ch√≠nh'
                    },
                    {
                      icon: 'üé®',
                      title: 'Thi·∫øt k·∫ø UI/UX',
                      desc: 'AI ƒë·ªÅ xu·∫•t layout v√† animations. Nh√≥m t√πy ch·ªânh color scheme, typography, spacing ƒë·ªÉ ph√π h·ª£p v·ªõi ƒë·ªÅ t√†i'
                    },
                    {
                      icon: 'üìù',
                      title: 'Vi·∫øt n·ªôi dung',
                      desc: 'AI cung c·∫•p draft ban ƒë·∫ßu. Nh√≥m fact-check, rewrite ho√†n to√†n, b·ªï sung case study Vi·ªát Nam v√† g√≥c nh√¨n ph·∫£n bi·ªán'
                    },
                    {
                      icon: 'üîç',
                      title: 'Research & Synthesis',
                      desc: 'AI t·ªïng h·ª£p th√¥ng tin t·ª´ nhi·ªÅu ngu·ªìn. Nh√≥m cross-reference, verify, v√† t√≠ch h·ª£p v·ªõi ki·∫øn th·ª©c h·ªçc thu·∫≠t'
                    }
                  ].map((item, index) => (
                    <motion.div
                      key={index}
                      className="bg-stone-900/60 border border-amber-800/30 rounded-xl p-6"
                      initial={{ opacity: 0, scale: 0.9 }}
                      animate={{ opacity: 1, scale: 1 }}
                      transition={{ delay: index * 0.1 }}
                      whileHover={{ scale: 1.03 }}
                    >
                      <div className="text-4xl mb-3">{item.icon}</div>
                      <h3 className="text-xl font-bold text-amber-200 mb-2">{item.title}</h3>
                      <p className="text-amber-100/80 text-sm leading-relaxed">{item.desc}</p>
                    </motion.div>
                  ))}
                </div>
              </motion.div>
            </motion.div>
          )}

          {/* Integrity Tab */}
          {activeTab === 'integrity' && (
            <motion.div
              key="integrity"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="space-y-6"
            >
              <motion.div 
                className="bg-amber-900/20 backdrop-blur-sm border border-amber-700/30 rounded-2xl p-6"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
              >
                <h2 className="text-3xl font-bold text-amber-100 mb-4" style={{ fontFamily: 'Georgia, serif' }}>
                  üìö Cam k·∫øt li√™m ch√≠nh
                </h2>
                
                <div className="space-y-6">
                  <div className="bg-stone-900/60 border-l-4 border-amber-500 p-6 rounded-r-xl">
                    <p className="text-amber-100 text-lg leading-relaxed mb-4">
                      Ch√∫ng em cam k·∫øt r·∫±ng t·∫•t c·∫£ n·ªôi dung trong b√†i b√°o c√°o n√†y ƒë·ªÅu l√† s·∫£n ph·∫©m c·ªßa t∆∞ duy, ph√¢n t√≠ch v√† 
                      s√°ng t·∫°o c·ªßa nh√≥m. AI ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng nh∆∞ m·ªôt c√¥ng c·ª• h·ªó tr·ª£ k·ªπ thu·∫≠t v√† t·ªïng h·ª£p th√¥ng tin.
                    </p>
                    <p className="text-amber-200/80 italic">
                      M·ªçi √Ω t∆∞·ªüng ch√≠nh, g√≥c nh√¨n ph√¢n t√≠ch, v√† k·∫øt lu·∫≠n ƒë·ªÅu ƒë∆∞·ª£c nh√≥m nghi√™n c·ª©u, th·∫£o lu·∫≠n v√† 
                      quy·∫øt ƒë·ªãnh ƒë·ªôc l·∫≠p d·ª±a tr√™n ki·∫øn th·ª©c h·ªçc thu·∫≠t v√† hi·ªÉu bi·∫øt v·ªÅ th·ª±c ti·ªÖn Vi·ªát Nam.
                    </p>
                  </div>

                  <div className="grid md:grid-cols-3 gap-4">
                    {[
                      { icon: '‚úì', title: 'Transparent', desc: 'C√¥ng khai m·ªçi c√¥ng c·ª• AI s·ª≠ d·ª•ng' },
                      { icon: '‚úì', title: 'Critical Thinking', desc: 'Kh√¥ng ch·∫•p nh·∫≠n m√π qu√°ng output c·ªßa AI' },
                      { icon: '‚úì', title: 'Original Work', desc: 'T∆∞ duy v√† s√°ng t·∫°o c·ªßa nh√≥m l√† ch√≠nh' }
                    ].map((item, index) => (
                      <motion.div
                        key={index}
                        className="bg-gradient-to-br from-green-900/40 to-emerald-900/40 border border-green-700/30 rounded-xl p-5 text-center"
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: index * 0.1 }}
                      >
                        <div className="text-3xl text-green-400 mb-2">{item.icon}</div>
                        <h3 className="text-lg font-bold text-green-200 mb-1">{item.title}</h3>
                        <p className="text-green-100/70 text-sm">{item.desc}</p>
                      </motion.div>
                    ))}
                  </div>
                </div>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

export default AIReportPage;
